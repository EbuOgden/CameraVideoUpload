if (Meteor.isCordova) {
    var options = {
        duration : 60,/*duration ozelligi iosta aktif degil */
        highquality : true,
        frontcamera : true/*program baslarken otomatik olarak on kamerayla basla*/
    };

    Template.hello.events({
        "click #cam" : function(){

            window.plugins.videocaptureplus.captureVideo(captureSuccess, captureError, options);

        }

    })

    var captureSuccess = function(mediaFiles){
        //var newFile = new FS.File();

        //var b;

        /*var a = JSON.stringify(mediaFiles[0]);//file objesini stringe cevirme
        var encrypted = CryptoJS.AES.encrypt(a, 'sa');//cevrilen stringin sifrelenmesi
        alert('encrypted : ' + encrypted);
        var decrypted = CryptoJS.AES.decrypt(encrypted, 'sa');//cevrilen stringin cozulmesi
        alert("reverse : " + JSON.parse(decrypted.toString(CryptoJS.enc.Utf8)));
        b = JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));//cevrilen stringin tekrar obje haline getirilmesi JSON.parse()*/


        window.resolveLocalFileSystemURI(mediaFiles[0].fullPath, function(fileEntry){//local dosya sistemine erisim olmadigi icin cekilen videonun pathini kullanabilecegimiz pathe cekiyoruz
            alert("Created Local File : " + fileEntry.nativeURL);
            fileEntry.file(function(file){//dosyayi kendi URI imiza aldiktan sonra .file methodu ile bir file objesi olusturuyoruz
                var b;
                alert("Or Name : " + file.name + " LocalURL : " + file.localURL + " Type : " + file.type + " Last Modified : " + file.lastModified);
                var a = JSON.stringify(file);//file objesini stringe cevirme
                var encrypted = CryptoJS.AES.encrypt(a, 'sa');//cevrilen stringin sifrelenmesi
                alert('encrypted : ' + encrypted);
                var decrypted = CryptoJS.AES.decrypt(encrypted, 'sa');//cevrilen stringin cozulmesi
                //alert("reverse : " + JSON.parse(decrypted.toString(CryptoJS.enc.Utf8)));
                b = JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));//cevrilen stringin tekrar obje haline getirilmesi JSON.parse()
                alert("Re Name : " + b.name + " LocalURL : " + b.localURL + " Type : " + b.type + " Last Modified : " + b.lastModified);
                newFile.attachData(file, function(error){//file objesini CollectionFS e koyabilmek icin FS.File turunden degiskene attach ediyoruz
                    if(error)
                        alert("Attach File Error : " + error);
                    else{
                        alert("newFile : " + newFile);
                        newFile.name("ISIM");//Fs.File degiskeni icin isim belirliyoruz
                        newFile.extension("3gp");//Fs.File olusan dosya icin uzanti
                        Records.insert(newFile, function(error, fileObj){//FS.File turunden degiskeni CollectionFS e insert ediyoruz
                            if(error){
                                alert("Error Occured While Insert: " + error );
                            }
                            else{

                                alert("Successfull Insert : " + fileObj);
                            }
                        })
                    }

                    })
                }, failFile);

            }, onResolveFail);

        function onResolveFail(err){

            alert("Resolve Error : " + err.code);
        }

        //uploadFile(mediaFiles[0]);
    }

        /*var uploadFile = function(mediaFile){ //videodan geri donen objeyi direkt olarak servera http || https protokoluyle upload etme
            var ft = new FileTransfer(), path = mediaFile.fullPath, name = mediaFile.name;
            var options = new FileUploadOptions();

             options.fileKey = "file";
            options.fileName = 'filename.jpg'; // We will use the name auto-generated by Node at the server side.
            options.mimeType = "image/jpeg";
            options.chunkedMode = false;
            options.params = { // Whatever you populate options.params with, will be available in req.body at the server-side.
                "description": "Uploaded from my phone"
            };

            ft.upload(path,
                "http://192.168.2.129:3000/uploads",
                function(result){
                    console.log("Upload Success : "  + result.responseCode);
                    console.log(result.bytesSent + " bytes sent");

                },
                function(err){
                    console.log("Error : " + path + ' : ' + err.code);
                },options);
                //{filename : name});

            }*/
}



if (Meteor.isServer) {

    Records.deny({
        'insert' : function(){
            return false;
        },

        'update' : function(){
            return false;
        }
    });

    Records.allow({
        'insert' : function(){
            return true;
        },

        'update' : function(){
            return true;
        }
    });

    /*Records.on('uploaded', function(fileObj){
        alert("Fron Server Uploaded : " + fileObj);
    });

    Records.on("stored" , function(fileObj){
        alert("From Server Stored : " + fileObj);
    });

    Records.on("error" , function(err, fileObj){
        alert("From Server Error : " + err);
    });
    /*var ffmpeg = Meteor.npmRequire('fluent-ffmpeg');

    Meteor.methods({
        'inputFile' : function inputFile(filePath){
            ffmpeg(filePath).audioBitrate(128);
        }
    })*/
    

}







var success = function(data){
    alert("Success Data : " + data);
}

var failFile = function(err){
    alert("File Method Error : " + err);
}

var captureError = function(err){
    alert("Capture Error : " + err);
}

var onError = function(err){
    alert("Resolve Error : " + err)
}
